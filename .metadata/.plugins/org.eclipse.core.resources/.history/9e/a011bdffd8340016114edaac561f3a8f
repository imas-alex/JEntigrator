package gdt.jgui.entity.graph;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Stack;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Logger;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JMenuItem;

import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;

import org.apache.commons.collections15.functors.ConstantTransformer;

import edu.uci.ics.jung.algorithms.layout.AbstractLayout;
import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.FRLayout2;
import edu.uci.ics.jung.algorithms.layout.SpringLayout;
import edu.uci.ics.jung.algorithms.layout.util.Relaxer;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.ObservableGraph;
import edu.uci.ics.jung.graph.event.GraphEvent;
import edu.uci.ics.jung.graph.event.GraphEventListener;
import edu.uci.ics.jung.graph.util.Graphs;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import gdt.data.entity.BaseHandler;
import gdt.data.entity.BondDetailHandler;
import gdt.data.entity.EdgeHandler;
import gdt.data.entity.EntityHandler;
import gdt.data.entity.GraphHandler;
import gdt.data.entity.facet.ExtensionHandler;
import gdt.data.entity.facet.FieldsHandler;
import gdt.data.grain.Core;
import gdt.data.grain.Identity;
import gdt.data.grain.Locator;
import gdt.data.grain.Sack;
import gdt.data.grain.Support;
import gdt.data.store.Entigrator;
import gdt.jgui.console.JConsoleHandler;
import gdt.jgui.console.JContext;
import gdt.jgui.console.JFacetOpenItem;
import gdt.jgui.console.JFacetRenderer;
import gdt.jgui.console.JMainConsole;
import gdt.jgui.console.JRequester;
import gdt.jgui.entity.JEntityFacetPanel;
import gdt.jgui.entity.JEntityPrimaryMenu;
import gdt.jgui.entity.JReferenceEntry;
import gdt.jgui.entity.edge.JBondsPanel;
import gdt.jgui.tool.JTextEditor;


public class JGraphRenderer extends JPanel implements JContext , JFacetRenderer,JRequester
, MouseMotionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Logger LOGGER=Logger.getLogger(getClass().getName());
	private static final String ACTION_CREATE_GRAPH="action create graph";
	private JMainConsole console;
	private String entihome$;
    private String entityKey$;
    private String entityLabel$;
    private Sack graphEntity;
    private String locator$;
  
    String requesterResponseLocator$;
    
    /////
  
	private Graph<Number,Number> g = null;

    private VisualizationViewer<Number,Number> vv = null;

    private AbstractLayout<Number,Number> layout = null;

    Timer timer;

    boolean done;

    protected JButton switchLayout;

//    public static final LengthFunction<Number> UNITLENGTHFUNCTION = new SpringLayout.UnitLengthFunction<Number>(
//            100);
    public static final int EDGE_LENGTH = 100;
    Integer v_prev = null;

    /////
    public JGraphRenderer()
  	{
  	    super();
  	    setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
  	    
  	}
  
	@Override
	public void response(JMainConsole console, String locator$) {
		System.out.println("JGraphrenderer:response:"+Locator.remove(locator$,Locator.LOCATOR_ICON ));
		try{
			Properties locator=Locator.toProperties(locator$);
			String action$=locator.getProperty(JRequester.REQUESTER_ACTION);
			entihome$=locator.getProperty(Entigrator.ENTIHOME);
			Entigrator entigrator=console.getEntigrator(entihome$);
			String text$=locator.getProperty(JTextEditor.TEXT);
			if(ACTION_CREATE_GRAPH.equals(action$)){
				Sack newEntity=entigrator.ent_new("graph", text$);
				newEntity.createElement("field");
				newEntity.putElementItem("field", new Core(null,"name","value"));
				newEntity.createElement("fhandler");
				newEntity.putElementItem("fhandler", new Core(null,GraphHandler.class.getName(),GraphHandler.EXTENSION_KEY));
				newEntity.putElementItem("fhandler", new Core(null,FieldsHandler.class.getName(),null));
				newEntity.createElement("jfacet");
				newEntity.putElementItem("jfacet", new Core("gdt.jgui.entity.graph.JGraphFacetAddItem",EdgeHandler.class.getName(),"gdt.jgui.entity.graph.JGraphFacetOpenItem"));
				newEntity.putAttribute(new Core (null,"icon","graph.png"));
				entigrator.save(newEntity);
				entigrator.ent_assignProperty(newEntity, "fields", text$);
				entigrator.ent_assignProperty(newEntity, "graph", text$);
				String icons$=entihome$+"/"+Entigrator.ICONS;
				Support.addHandlerIcon(JGraphRenderer.class, "graph.png", icons$);
				newEntity=entigrator.ent_reindex(newEntity);
				reindex(console, entigrator, newEntity);
				JEntityFacetPanel efp=new JEntityFacetPanel(); 
				String efpLocator$=efp.getLocator();
				efpLocator$=Locator.append(efpLocator$,Locator.LOCATOR_TITLE,newEntity.getProperty("label"));
				efpLocator$=Locator.append(efpLocator$, Entigrator.ENTIHOME, entihome$);
				efpLocator$=Locator.append(efpLocator$, EntityHandler.ENTITY_KEY, newEntity.getKey());
				efpLocator$=Locator.append(efpLocator$, EntityHandler.ENTITY_LABEL, newEntity.getProperty("label"));
				JEntityPrimaryMenu.reindexEntity(console, efpLocator$);
				Stack<String> s=console.getTrack();
				s.pop();
				console.setTrack(s);
				JConsoleHandler.execute(console, efpLocator$);
				return;
			}
			}catch(Exception e){
			Logger.getLogger(getClass().getName()).severe(e.toString());
		}
		
		
	}

	@Override
	public String addIconToLocator(String locator$) {
		// TODO Auto-generated method stub
		return locator$;
	}

	@Override
	public String getFacetHandler() {
		return GraphHandler.class.getName();
	}

	@Override
	public String getEntityType() {
		return "graph";
	}

	@Override
	public String getCategoryIcon() {
try{
		Entigrator entigrator=console.getEntigrator(entihome$);
		return ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
}catch(Exception e){
	LOGGER.severe(e.toString());
	return null;
}
	}

	@Override
	public String getCategoryTitle() {
		return "Graphs";
	}

	@Override
	public void adaptClone(JMainConsole console, String locator$) {
		try{
			Properties locator=Locator.toProperties(locator$);
			String entihome$=locator.getProperty(Entigrator.ENTIHOME);
			String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
			Entigrator entigrator=console.getEntigrator(entihome$);
			Sack entity=entigrator.getEntityAtKey(entityKey$);
			String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
			GraphHandler graphHandler=new GraphHandler();
			graphHandler.instantiate(entityLocator$);
			graphHandler.adaptClone(entigrator);
		}catch(Exception e){
			LOGGER.severe(e.toString());
		}
		
	}

	@Override
	public void adaptRename(JMainConsole console, String locator$) {
		try{
			Properties locator=Locator.toProperties(locator$);
			String entihome$=locator.getProperty(Entigrator.ENTIHOME);
			String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
			Entigrator entigrator=console.getEntigrator(entihome$);
			Sack entity=entigrator.getEntityAtKey(entityKey$);
			String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
			GraphHandler graphHandler=new GraphHandler();
			graphHandler.instantiate(entityLocator$);
			graphHandler.adaptRename(entigrator);
		}catch(Exception e){
			LOGGER.severe(e.toString());
		}
		
	}

	@Override
	public void collectReferences(Entigrator entigrator, String entiyKey$, ArrayList<JReferenceEntry> sl) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void reindex(JMainConsole console, Entigrator entigrator, Sack entity) {
		try{	
	    	String graphHandler$=GraphHandler.class.getName();
	    	if(entity.getElementItem("fhandler", graphHandler$)!=null){
				entity.putElementItem("jfacet", new Core(null,graphHandler$,JGraphFacetOpenItem.class.getName()));
				entigrator.save(entity);
			}
	    }catch(Exception e){
	    	Logger.getLogger(getClass().getName()).severe(e.toString());
	    }
		
	}

	@Override
	public String newEntity(JMainConsole console, String locator$) {
		try{
			Properties locator=Locator.toProperties(locator$);
			String entihome$=locator.getProperty(Entigrator.ENTIHOME);
			JTextEditor textEditor=new JTextEditor();
		    String teLocator$=textEditor.getLocator();
		    teLocator$=Locator.append(teLocator$, Entigrator.ENTIHOME,entihome$);
		    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT_TITLE,"New graph");
		    String text$="NewGraph"+Identity.key().substring(0, 4);
		    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT,text$);
		    JGraphRenderer gr=new JGraphRenderer();
		    String grLocator$=gr.getLocator();
		    grLocator$=Locator.append(grLocator$, Entigrator.ENTIHOME,entihome$);
		    grLocator$=Locator.append(grLocator$, EntityHandler.ENTITY_KEY,entityKey$);
		    grLocator$=Locator.append(grLocator$, BaseHandler.HANDLER_METHOD,"response");
		    grLocator$=Locator.append(grLocator$, JRequester.REQUESTER_ACTION,ACTION_CREATE_GRAPH);
		    String requesterResponseLocator$=Locator.compressText(grLocator$);
		    teLocator$=Locator.append(teLocator$,JRequester.REQUESTER_RESPONSE_LOCATOR,requesterResponseLocator$);
		    JConsoleHandler.execute(console, teLocator$);
		}catch(Exception ee){   
			LOGGER.severe(ee.toString());
			
		}
		return null;
	}

	@Override
	public JPanel getPanel() {
		return this;
	}

	@Override
	public JMenu getContextMenu() {
		final JMenu	menu=new JMenu("Context");
		   menu.setName("Context");
		   menu.addMenuListener(new MenuListener(){
				@Override
				public void menuSelected(MenuEvent e) {
					menu.removeAll();
					//mxGraphComponent graphComponent = new mxGraphComponent(graph);
					JMenuItem showItem = new JMenuItem("Graph");
					 showItem.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							try{
						
			//					displayGraph();
							}catch(Exception ee){
								 Logger.getLogger(JGraphRenderer.class.getName()).info(ee.toString());
							}
							   }
					});
					menu.add(showItem);
					 JMenuItem  nodesItem = new JMenuItem("Nodes");
					   nodesItem.addActionListener(new ActionListener() {
							@Override
							public void actionPerformed(ActionEvent e) {
								JGraphNodes gn=new JGraphNodes();
								String gnLocator$= gn.getLocator();
								gnLocator$=Locator.append(gnLocator$, Entigrator.ENTIHOME, entihome$);
								gnLocator$=Locator.append(gnLocator$, EntityHandler.ENTITY_KEY, entityKey$);
								JConsoleHandler.execute(console, gnLocator$);
							}
						} );
						menu.add(nodesItem);
						JMenuItem  bondsItem = new JMenuItem("Bonds");
						   bondsItem.addActionListener(new ActionListener() {
								@Override
								public void actionPerformed(ActionEvent e) {
									JBondsPanel bondsPanel=new JBondsPanel();
									String bpLocator$=bondsPanel.getLocator();
									bpLocator$=Locator.append(bpLocator$, Entigrator.ENTIHOME, entihome$);
									bpLocator$=Locator.append(bpLocator$, EntityHandler.ENTITY_KEY, entityKey$);
									bpLocator$=Locator.append(bpLocator$, JFacetOpenItem.FACET_HANDLER_CLASS, BondDetailHandler.class.getName());
									JConsoleHandler.execute(console, bpLocator$);
								}
							} );
							menu.add(bondsItem);
						menu.addSeparator();	
						JMenuItem  rebuildItem = new JMenuItem("Rebuild");
						   rebuildItem.addActionListener(new ActionListener() {
								@Override
								public void actionPerformed(ActionEvent e) {
									rebuild();
								}
							} );
						   menu.add(rebuildItem);
				}

				@Override
				public void menuDeselected(MenuEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void menuCanceled(MenuEvent e) {
					// TODO Auto-generated method stub
					
				}
		   });
		  
			return menu;
	}

	@Override
	public String getLocator() {
		try{
			Properties locator=new Properties();
			locator.setProperty(BaseHandler.HANDLER_CLASS,JGraphRenderer.class.getName());
			locator.setProperty(BaseHandler.HANDLER_SCOPE,JConsoleHandler.CONSOLE_SCOPE);
			 locator.setProperty( JContext.CONTEXT_TYPE,getType());
			locator.setProperty(Locator.LOCATOR_TITLE,getTitle());
			if(entityLabel$!=null){
				locator.setProperty(EntityHandler.ENTITY_LABEL,entityLabel$);
			}
			if(entityKey$!=null)
				locator.setProperty(EntityHandler.ENTITY_KEY,entityKey$);
			if(entihome$!=null){
				locator.setProperty(Entigrator.ENTIHOME,entihome$);
				if(entihome$!=null){
					locator.setProperty(Entigrator.ENTIHOME,entihome$);
					Entigrator entigrator=console.getEntigrator(entihome$);
				String icon$=ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
				if(icon$!=null)
				    	locator.setProperty(Locator.LOCATOR_ICON,icon$);
				}
			}
			if(entityLabel$!=null)
				locator.setProperty(EntityHandler.ENTITY_LABEL,entityLabel$);
			return Locator.toString(locator);
			}catch(Exception e){
	        Logger.getLogger(getClass().getName()).severe(e.toString());
	        return null;
			}
	}

	@Override
	public JContext instantiate(JMainConsole console, String locator$) {
		try{
				System.out.println("JGraphRenderer:instantiate:locator="+locator$);
				this.console=console;
				this.locator$=locator$;
				if(console==null)
					System.out.println("JGraphRenderer:instantiate:consoleis null");
				Properties locator=Locator.toProperties(locator$);
				entihome$=locator.getProperty(Entigrator.ENTIHOME);
				entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
				Entigrator entigrator=console.getEntigrator(entihome$);
				requesterResponseLocator$=locator.getProperty(JRequester.REQUESTER_RESPONSE_LOCATOR);
	            graphEntity=entigrator.getEntityAtKey(entityKey$);
	            entityLabel$=graphEntity.getProperty("label");
	   		    locator=new Properties();
   	   		 locator.setProperty(Locator.LOCATOR_TITLE, "Graph");
   	  	locator.setProperty(Entigrator.ENTIHOME,entihome$);
   	  	String icon$=ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
   	  	if(icon$!=null)
	    	locator.setProperty(Locator.LOCATOR_ICON,icon$);
		}catch(Exception e){
		        Logger.getLogger(getClass().getName()).severe(e.toString());
			}
		System.out.println("JGraphRenderer:instantiate:finish");
			return this;
			
	}

	@Override
	public String getTitle() {
		return "Graph";
	}

	@Override
	public String getSubtitle() {
		return entityLabel$;
	}

	@Override
	public String getType() {
		return "graph";
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseDragged(MouseEvent e) {
		System.out.println("JGraphRenderer: mouseDragged:BEGIN");
		
	}
	@Override
	public void mouseMoved(MouseEvent e) {
		System.out.println("JGraphRenderer: mouseMoved:BEGIN");
		
	}
	
private void rebuild(){
	try{
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack graph=entigrator.getEntityAtKey(entityKey$);
		Core[] ca=graph.elementGet("node");
		graph.removeElement("bond");
		graph.createElement("bond");
		Sack node;
		if(ca==null)
			return;
		Core[]ba;
		for(Core c:ca){
			node=entigrator.getEntityAtKey(c.name);
			if(node==null)
				continue;
			ba=node.elementGet("bond");
			if(ba!=null)
				for( Core b:ba){
					if(graph.getElementItem("bond", b.name)!=null)
						continue;
					graph.putElementItem("bond", b);
					
				}
			
		}
	entigrator.save(graph);	
		
	}catch(Exception e){
		Logger.getLogger(JGraphRenderer.class.getName()).severe(e.toString());
	}
}
private void displayGraph(){
	try{
		init();
    	timer.schedule(new RemindTask(), 1000, 1000);
	}catch(Exception e){
		LOGGER.severe(e.toString());
	}
}
public void init() {

    //create a graph
	Graph<Number,Number> ig = Graphs.<Number,Number>synchronizedDirectedGraph(new DirectedSparseMultigraph<Number,Number>());

    ObservableGraph<Number,Number> og = new ObservableGraph<Number,Number>(ig);
    og.addGraphEventListener(new GraphEventListener<Number,Number>() {

		public void handleGraphEvent(GraphEvent<Number, Number> evt) {
			System.err.println("got "+evt);

		}});
    this.g = og;
    //create a graphdraw
    layout = new FRLayout2<Number,Number>(g);
//    ((FRLayout)layout).setMaxIterations(200);

    vv = new VisualizationViewer<Number,Number>(layout, new Dimension(600,600));

    JRootPane rp = this.getRootPane();
    rp.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);

    setLayout(new BorderLayout());
    setBackground(java.awt.Color.lightGray);
    setFont(new Font("Serif", Font.PLAIN, 12));

    vv.getModel().getRelaxer().setSleepTime(500);
    vv.setGraphMouse(new DefaultModalGraphMouse<Number,Number>());

    vv.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);
    vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller<Number>());
    vv.setForeground(Color.white);
    add(vv);
    switchLayout = new JButton("Switch to SpringLayout");
    switchLayout.addActionListener(new ActionListener() {

        @SuppressWarnings("unchecked")
        public void actionPerformed(ActionEvent ae) {
        	Dimension d = new Dimension(600,600);
            if (switchLayout.getText().indexOf("Spring") > 0) {
                switchLayout.setText("Switch to FRLayout");
                layout = new SpringLayout<Number,Number>(g,
                    new ConstantTransformer(EDGE_LENGTH));
                layout.setSize(d);
                vv.getModel().setGraphLayout(layout, d);
            } else {
                switchLayout.setText("Switch to SpringLayout");
                layout = new FRLayout<Number,Number>(g, d);
                vv.getModel().setGraphLayout(layout, d);
            }
        }
    });
    add(switchLayout, BorderLayout.SOUTH);
    timer = new Timer();
    //timer.schedule(new RemindTask(), 1000, 1000); //subsequent rate
}
public void process() {

    try {

        if (g.getVertexCount() < 100) {
        	layout.lock(true);
            //add a vertex
            Integer v1 = new Integer(g.getVertexCount());

            Relaxer relaxer = vv.getModel().getRelaxer();
            relaxer.pause();
            g.addVertex(v1);
            System.err.println("added node " + v1);

            // wire it to some edges
            if (v_prev != null) {
                g.addEdge(g.getEdgeCount(), v_prev, v1);
                // let's connect to a random vertex, too!
                int rand = (int) (Math.random() * g.getVertexCount());
                g.addEdge(g.getEdgeCount(), v1, rand);
            }

            v_prev = v1;

            layout.initialize();
            relaxer.resume();
            layout.lock(false);
        } else {
        	done = true;
        }

    } catch (Exception e) {
        System.out.println(e);

    }
}
class RemindTask extends TimerTask {

    @Override
    public void run() {
        process();
        if(done) cancel();

    }
}
}

