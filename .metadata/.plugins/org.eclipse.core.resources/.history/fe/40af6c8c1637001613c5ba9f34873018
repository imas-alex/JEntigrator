package gdt.jgui.entity.graph;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Stack;
import java.util.logging.Logger;

import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;

import gdt.data.entity.BaseHandler;
import gdt.data.entity.BondDetailHandler;
import gdt.data.entity.EdgeHandler;
import gdt.data.entity.EntityHandler;
import gdt.data.entity.GraphHandler;
import gdt.data.entity.NodeHandler;
import gdt.data.entity.facet.ExtensionHandler;
import gdt.data.entity.facet.FieldsHandler;
import gdt.data.grain.Core;
import gdt.data.grain.Identity;
import gdt.data.grain.Locator;
import gdt.data.grain.Sack;
import gdt.data.grain.Support;
import gdt.data.store.Entigrator;
import gdt.jgui.console.JConsoleHandler;
import gdt.jgui.console.JContext;
import gdt.jgui.console.JFacetOpenItem;
import gdt.jgui.console.JFacetRenderer;
import gdt.jgui.console.JItemPanel;
import gdt.jgui.console.JItemsListPanel;
import gdt.jgui.console.JMainConsole;
import gdt.jgui.console.JRequester;
import gdt.jgui.entity.JEntityFacetPanel;
import gdt.jgui.entity.JEntityPrimaryMenu;
import gdt.jgui.entity.JReferenceEntry;
import gdt.jgui.entity.edge.JBondsPanel;
import gdt.jgui.tool.JTextEditor;


public class JGraphViewSelector extends  JItemsListPanel implements   JFacetRenderer,JRequester{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Logger LOGGER=Logger.getLogger(getClass().getName());
	private static final String ACTION_CREATE_GRAPH="action create graph";
	String entihome$;
    String list$;
    String entityKey$;
    String entityLabel$;
    public JGraphViewSelector() {
        super();
 	}
	@Override
	public String getLocator() {
		System.out.println("JGraphViewLocator:getLocator:BEGIN");
		Properties locator=new Properties();
	    locator.setProperty(Locator.LOCATOR_TYPE, JContext.CONTEXT_TYPE);
	    locator.setProperty(JContext.CONTEXT_TYPE,getType());
	    locator.setProperty(BaseHandler.HANDLER_LOCATION,GraphHandler.EXTENSION_KEY);
	    if(entihome$!=null){
	       locator.setProperty(Entigrator.ENTIHOME,entihome$);
	    Entigrator entigrator=console.getEntigrator(entihome$);
	    String icon$=ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY, "graph.png");
	    if(icon$!=null)
		    	locator.setProperty(Locator.LOCATOR_ICON,icon$);
	    }
	    if(entityKey$!=null)
		       locator.setProperty(EntityHandler.ENTITY_KEY,entityKey$);
	    if(entityLabel$!=null)
		       locator.setProperty(EntityHandler.ENTITY_LABEL,entityLabel$);
	    locator.setProperty(Locator.LOCATOR_TITLE, getTitle());
        locator.setProperty(BaseHandler.HANDLER_SCOPE,JConsoleHandler.CONSOLE_SCOPE);
	    locator.setProperty(BaseHandler.HANDLER_CLASS,getClass().getName());
		
		locator$=Locator.toString(locator);
		System.out.println("JGraphViewLocator:getLocator:locator="+locator$);
	    return locator$ ;
	}
	@Override
	public JContext instantiate(JMainConsole console, String locator$) {
	    
		try{
			System.out.println("JGraphViewSelector:instantiate:locator="+locator$);
			 this.console=console;
			 Properties locator=Locator.toProperties(locator$);
			 entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
			 entihome$=locator.getProperty(Entigrator.ENTIHOME);
        	 entityLabel$=locator.getProperty(EntityHandler.ENTITY_LABEL);
        	 if(entityLabel$==null&&entityKey$!=null){
        		 Entigrator entigrator=console.getEntigrator(entihome$);
        		 entityLabel$=entigrator.indx_getLabel(entityKey$);
        	 }
        	 ArrayList<JItemPanel>ipl=new ArrayList<JItemPanel>();
        	 String actionLocator$=getNodesLocator();
        	 JItemPanel nodesItem=new JItemPanel(console, actionLocator$);
   		  	 ipl.add(nodesItem);
    		
   		  	 actionLocator$=getEdgesLocator();
    		 JItemPanel edgesItem=new JItemPanel(console, actionLocator$);
		  	 ipl.add(edgesItem);
		  	 
   		  	 actionLocator$=getMapLocator();
    		 JItemPanel graphItem=new JItemPanel(console, actionLocator$);
		  	 ipl.add(graphItem);
		  	  
		  	 actionLocator$=getFacetsLocator();
		  	actionLocator$=Locator.append(actionLocator$, Locator.LOCATOR_TITLE, "Entity");
    		 JItemPanel facetsItem=new JItemPanel(console, actionLocator$);
		  	 
    		 ipl.add(facetsItem);
		  	 
		  	  putItems(ipl.toArray(new JItemPanel[0]));
        	return this;
        }catch(Exception e){
        
        Logger.getLogger(JGraphViewSelector.class.getName()).severe(e.toString());
        }
        return null;
        }
	@Override
	public JMenu getContextMenu() {
		final JMenu	menu=new JMenu("Context");
		   menu.setName("Context");
		   menu.addMenuListener(new MenuListener(){
				@Override
				public void menuSelected(MenuEvent e) {
					menu.removeAll();
					
					JMenuItem  recentItem = new JMenuItem("Put as recent");
					   recentItem.addActionListener(new ActionListener() {
							@Override
							public void actionPerformed(ActionEvent e) {
						      console.getRecents().put(getTitle(), getLocator());
							}
						} );
						menu.add(recentItem);	
						JMenuItem  rebuildItem = new JMenuItem("Rebuild");
						   rebuildItem.addActionListener(new ActionListener() {
								@Override
								public void actionPerformed(ActionEvent e) {
									rebuild();
								}
							} );
						   menu.add(rebuildItem);
				}

				@Override
				public void menuDeselected(MenuEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void menuCanceled(MenuEvent e) {
					// TODO Auto-generated method stub
					
				}
		   });
		  
			return menu;
	}


	@Override
	public String getTitle() {
		if(entityLabel$!=null)
		 return entityLabel$;
		else
			return "Graph view selector";
	}

	@Override
	public String getSubtitle() {
		return entihome$;
	}

	@Override
	public String getType() {
		return "Graph view selector";
	}

	@Override
	public void close() {
		
	}
private String getNodesLocator(){
	try{
		JGraphNodes gn=new JGraphNodes();
		String gn$=gn.getLocator();
		gn$=Locator.append(gn$, Entigrator.ENTIHOME, entihome$);
		gn$=Locator.append(gn$, EntityHandler.ENTITY_KEY, entityKey$);
		gn$=Locator.append(gn$, EntityHandler.ENTITY_LABEL, entityLabel$);
		Entigrator entigrator=console.getEntigrator(entihome$);
		String icon$=ExtensionHandler.loadIcon(entigrator, NodeHandler.EXTENSION_KEY, "node.png");
		gn$=Locator.append(gn$,Locator.LOCATOR_ICON,icon$);
		return gn$;
		//gn.instantiate(console, gn$);
		//return gn.getLocator();
	}catch(Exception e){
		 Logger.getLogger(JGraphViewSelector.class.getName()).severe(e.toString());
	}
	return null;
}
private String getEdgesLocator(){

	try{
		JGraphEdgesPanel ep=new JGraphEdgesPanel();
		String ep$=ep.getLocator();
		ep$=Locator.append(ep$, Entigrator.ENTIHOME, entihome$);
		ep$=Locator.append(ep$, EntityHandler.ENTITY_KEY, entityKey$);
		ep$=Locator.append(ep$, EntityHandler.ENTITY_LABEL, entityLabel$);
		Entigrator entigrator=console.getEntigrator(entihome$);
		String icon$=ExtensionHandler.loadIcon(entigrator, EdgeHandler.EXTENSION_KEY, "edge.png");
		ep$=Locator.append(ep$,Locator.LOCATOR_ICON,icon$);
		return ep$;
		//ep.instantiate(console, ep$);
		//return ep.getLocator();
	}catch(Exception e){
		 Logger.getLogger(JGraphViewSelector.class.getName()).severe(e.toString());
	}
	
	return null;
}
private String getMapLocator(){

	try{
		JGraphRenderer gr=new JGraphRenderer();
		String gr$=gr.getLocator();
		gr$=Locator.append(gr$, Entigrator.ENTIHOME, entihome$);
		gr$=Locator.append(gr$, EntityHandler.ENTITY_KEY, entityKey$);
		gr$=Locator.append(gr$, EntityHandler.ENTITY_LABEL, entityLabel$);
		Entigrator entigrator=console.getEntigrator(entihome$);
		String icon$=ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY, "map.png");
		gr$=Locator.append(gr$,Locator.LOCATOR_ICON,icon$);
		return gr$;
		//gr.instantiate(console, gr$);
		//return gr.getLocator();
	}catch(Exception e){
		 Logger.getLogger(JGraphViewSelector.class.getName()).severe(e.toString());
	}

	return null;
}
private String getFacetsLocator(){

	try{
		JEntityFacetPanel fp=new JEntityFacetPanel();
		String fp$=fp.getLocator();
		fp$=Locator.append(fp$, Entigrator.ENTIHOME, entihome$);
		fp$=Locator.append(fp$, EntityHandler.ENTITY_KEY, entityKey$);
		fp$=Locator.append(fp$, EntityHandler.ENTITY_LABEL, "Entity");
		//fp$=Locator.append(fp$, Locator.LOCATOR_TITLE, "Entity");
		//fp.instantiate(console, fp$);
		return fp$;
	}catch(Exception e){
		 Logger.getLogger(JGraphViewSelector.class.getName()).severe(e.toString());
	}

	return null;
}
@Override
public String addIconToLocator(String locator$) {
	// TODO Auto-generated method stub
	return null;
}
@Override
public String getFacetHandler() {
	return GraphHandler.class.getName();
}
@Override
public String getEntityType() {
	return "graph";
}
@Override
public String getCategoryIcon() {
	try{
		Entigrator entigrator=console.getEntigrator(entihome$);
		return ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
}catch(Exception e){
	LOGGER.severe(e.toString());
	return null;
}
}
@Override
public String getCategoryTitle() {
	return "Graphs";
}
@Override
public void adaptClone(JMainConsole console, String locator$) {
	try{
		Properties locator=Locator.toProperties(locator$);
		String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack entity=entigrator.getEntityAtKey(entityKey$);
		String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
		GraphHandler graphHandler=new GraphHandler();
		graphHandler.instantiate(entityLocator$);
		graphHandler.adaptClone(entigrator);
	}catch(Exception e){
		LOGGER.severe(e.toString());
	}
	
	
}
@Override
public void adaptRename(JMainConsole console, String locator$) {
	try{
		Properties locator=Locator.toProperties(locator$);
		String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack entity=entigrator.getEntityAtKey(entityKey$);
		String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
		GraphHandler graphHandler=new GraphHandler();
		graphHandler.instantiate(entityLocator$);
		graphHandler.adaptRename(entigrator);
	}catch(Exception e){
		LOGGER.severe(e.toString());
	}
	
}
@Override
public void collectReferences(Entigrator entigrator, String entiyKey$, ArrayList<JReferenceEntry> sl) {
	// TODO Auto-generated method stub
	
}
@Override
public void reindex(JMainConsole console, Entigrator entigrator, Sack entity) {
	try{	
    	String graphHandler$=GraphHandler.class.getName();
    	if(entity.getElementItem("fhandler", graphHandler$)!=null){
			entity.putElementItem("jfacet", new Core(null,graphHandler$,JGraphFacetOpenItem.class.getName()));
			entigrator.save(entity);
		}
    }catch(Exception e){
    	Logger.getLogger(getClass().getName()).severe(e.toString());
    }
	
	
}
@Override
public String newEntity(JMainConsole console, String locator$) {
	try{
		Properties locator=Locator.toProperties(locator$);
		String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		JTextEditor textEditor=new JTextEditor();
	    String teLocator$=textEditor.getLocator();
	    teLocator$=Locator.append(teLocator$, Entigrator.ENTIHOME,entihome$);
	    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT_TITLE,"New graph");
	    String text$="NewGraph"+Identity.key().substring(0, 4);
	    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT,text$);
	    JGraphRenderer gr=new JGraphRenderer();
	    String grLocator$=gr.getLocator();
	    grLocator$=Locator.append(grLocator$, Entigrator.ENTIHOME,entihome$);
	    grLocator$=Locator.append(grLocator$, EntityHandler.ENTITY_KEY,entityKey$);
	    grLocator$=Locator.append(grLocator$, BaseHandler.HANDLER_METHOD,"response");
	    grLocator$=Locator.append(grLocator$, JRequester.REQUESTER_ACTION,ACTION_CREATE_GRAPH);
	    String requesterResponseLocator$=Locator.compressText(grLocator$);
	    teLocator$=Locator.append(teLocator$,JRequester.REQUESTER_RESPONSE_LOCATOR,requesterResponseLocator$);
	    JConsoleHandler.execute(console, teLocator$);
	}catch(Exception ee){   
		LOGGER.severe(ee.toString());
		
	}
	return null;
}
@Override
public void response(JMainConsole console, String locator$) {
	System.out.println("JGraphrenderer:response:"+Locator.remove(locator$,Locator.LOCATOR_ICON ));
	try{
		Properties locator=Locator.toProperties(locator$);
		String action$=locator.getProperty(JRequester.REQUESTER_ACTION);
		entihome$=locator.getProperty(Entigrator.ENTIHOME);
		Entigrator entigrator=console.getEntigrator(entihome$);
		String text$=locator.getProperty(JTextEditor.TEXT);

		if(ACTION_CREATE_GRAPH.equals(action$)){
			Sack newEntity=entigrator.ent_new("graph", text$);
			newEntity.createElement("field");
			newEntity.putElementItem("field", new Core(null,"name","value"));
			newEntity.createElement("fhandler");
			newEntity.putElementItem("fhandler", new Core(null,GraphHandler.class.getName(),GraphHandler.EXTENSION_KEY));
			newEntity.putElementItem("fhandler", new Core(null,FieldsHandler.class.getName(),null));
			newEntity.createElement("jfacet");
			newEntity.putElementItem("jfacet", new Core("gdt.jgui.entity.graph.JGraphFacetAddItem",EdgeHandler.class.getName(),"gdt.jgui.entity.graph.JGraphFacetOpenItem"));
			newEntity.putAttribute(new Core (null,"icon","graph.png"));
			entigrator.save(newEntity);
			entigrator.ent_assignProperty(newEntity, "fields", text$);
			entigrator.ent_assignProperty(newEntity, "graph", text$);
			String icons$=entihome$+"/"+Entigrator.ICONS;
			Support.addHandlerIcon(JGraphRenderer.class, "graph.png", icons$);
			newEntity=entigrator.ent_reindex(newEntity);
			JEntityFacetPanel efp=new JEntityFacetPanel(); 
			String efpLocator$=efp.getLocator();
			efpLocator$=Locator.append(efpLocator$,Locator.LOCATOR_TITLE,newEntity.getProperty("label"));
			efpLocator$=Locator.append(efpLocator$, Entigrator.ENTIHOME, entihome$);
			efpLocator$=Locator.append(efpLocator$, EntityHandler.ENTITY_KEY, newEntity.getKey());
			efpLocator$=Locator.append(efpLocator$, EntityHandler.ENTITY_LABEL, newEntity.getProperty("label"));
			JEntityPrimaryMenu.reindexEntity(console, efpLocator$);
			Stack<String> s=console.getTrack();
			s.pop();
			console.setTrack(s);
			JConsoleHandler.execute(console, efpLocator$);
			return;
		}
		}catch(Exception e){
		Logger.getLogger(getClass().getName()).severe(e.toString());
	}
	
	
}
private void rebuild(){
	try{
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack graph=entigrator.getEntityAtKey(entityKey$);
		Core[] ca=graph.elementGet("node");
		graph.removeElement("bond");
		graph.createElement("bond");
		graph.removeElement("edge.entity");
		graph.createElement("edge.entity");
		Sack node;
		if(ca==null)
			return;
		Core[]ba;
		for(Core c:ca){
			node=entigrator.getEntityAtKey(c.name);
			if(node==null)
				continue;
			ba=node.elementGet("bond");
			if(ba!=null)
				for( Core b:ba){
					if(graph.getElementItem("bond", b.name)!=null)
						continue;
					graph.putElementItem("bond", b);
					graph.putElementItem("edge.entity", node.getElementItem("edge", b.name));
					
				}
			
		}
	entigrator.save(graph);	
		
	}catch(Exception e){
		Logger.getLogger(JGraphRenderer.class.getName()).severe(e.toString());
	}
}
}
