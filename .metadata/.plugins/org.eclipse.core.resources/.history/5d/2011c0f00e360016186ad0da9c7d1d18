package gdt.jgui.entity.graph;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Logger;


import gdt.data.entity.BaseHandler;
import gdt.data.entity.EntityHandler;
import gdt.data.entity.GraphHandler;
import gdt.data.entity.facet.ExtensionHandler;
import gdt.data.grain.Core;
import gdt.data.grain.Identity;
import gdt.data.grain.Locator;
import gdt.data.grain.Sack;
import gdt.data.store.Entigrator;
import gdt.jgui.console.JConsoleHandler;
import gdt.jgui.console.JContext;
import gdt.jgui.console.JFacetRenderer;
import gdt.jgui.console.JItemPanel;
import gdt.jgui.console.JItemsListPanel;
import gdt.jgui.console.JMainConsole;
import gdt.jgui.console.JRequester;
import gdt.jgui.entity.JEntityFacetPanel;
import gdt.jgui.entity.JReferenceEntry;
import gdt.jgui.tool.JTextEditor;


public class JViewSelector extends  JItemsListPanel implements   JFacetRenderer{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Logger LOGGER=Logger.getLogger(getClass().getName());
	private static final String ACTION_CREATE_GRAPH="action create graph";
	String entihome$;
    String list$;
    String entityKey$;
    String entityLabel$;
    public JViewSelector() {
        super();
 	}
	@Override
	public String getLocator() {
		Properties locator=new Properties();
	    locator.setProperty(Locator.LOCATOR_TYPE, JContext.CONTEXT_TYPE);
	    locator.setProperty(JContext.CONTEXT_TYPE,getType());
	    if(entihome$!=null){
	       locator.setProperty(Entigrator.ENTIHOME,entihome$);
	    Entigrator entigrator=console.getEntigrator(entihome$);
	    String icon$=ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY, "graph.png");
	    if(icon$!=null)
		    	locator.setProperty(Locator.LOCATOR_ICON,icon$);
	    }
	    if(entityKey$!=null)
		       locator.setProperty(EntityHandler.ENTITY_KEY,entityKey$);
	    if(entityLabel$!=null)
		       locator.setProperty(EntityHandler.ENTITY_LABEL,entityLabel$);
	    locator.setProperty(Locator.LOCATOR_TITLE, getTitle());
        locator.setProperty(BaseHandler.HANDLER_SCOPE,JConsoleHandler.CONSOLE_SCOPE);
	    locator.setProperty(BaseHandler.HANDLER_CLASS,getClass().getName());
		if(list$!=null)
			locator.setProperty(EntityHandler.ENTITY_LIST, list$);
	    return Locator.toString(locator);
	}
	@Override
	public JContext instantiate(JMainConsole console, String locator$) {
	    
		try{
	//		System.out.println("JArchivePanel:instantiate:locator="+locator$);
			 this.console=console;
			 Properties locator=Locator.toProperties(locator$);
			 list$=locator.getProperty(EntityHandler.ENTITY_LIST);
			 entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
			 entihome$=locator.getProperty(Entigrator.ENTIHOME);
        	 entityLabel$=locator.getProperty(EntityHandler.ENTITY_LABEL);
        	 if(entityLabel$==null&&entityKey$!=null){
        		 Entigrator entigrator=console.getEntigrator(entihome$);
        		 entityLabel$=entigrator.indx_getLabel(entityKey$);
        	 }
        	 ArrayList<JItemPanel>ipl=new ArrayList<JItemPanel>();
        	 String actionLocator$=getNodesLocator();
        	 JItemPanel nodesItem=new JItemPanel(console, actionLocator$);
   		  	 ipl.add(nodesItem);
    		
   		  	 actionLocator$=getEdgesLocator();
    		 JItemPanel edgesItem=new JItemPanel(console, actionLocator$);
		  	 ipl.add(edgesItem);
		  	 
   		  	 actionLocator$=getGraphLocator();
    		 JItemPanel graphItem=new JItemPanel(console, actionLocator$);
		  	 ipl.add(graphItem);
		  	  
		  	 actionLocator$=getFacetsLocator();
    		 JItemPanel facetsItem=new JItemPanel(console, actionLocator$);
		  	 ipl.add(facetsItem);
		  	 
		  	  putItems(ipl.toArray(new JItemPanel[0]));
        	return this;
        }catch(Exception e){
        
        Logger.getLogger(JViewSelector.class.getName()).severe(e.toString());
        }
        return null;
        }
	@Override
	public String getTitle() {
		return entityLabel$;
	}

	@Override
	public String getSubtitle() {
		return entihome$;
	}

	@Override
	public String getType() {
		return "Graph view selector";
	}

	@Override
	public void close() {
		
	}
private String getNodesLocator(){
	try{
		JGraphNodes gn=new JGraphNodes();
		String gn$=gn.getLocator();
		gn$=Locator.append(gn$, Entigrator.ENTIHOME, entihome$);
		gn$=Locator.append(gn$, EntityHandler.ENTITY_KEY, entityKey$);
		gn$=Locator.append(gn$, EntityHandler.ENTITY_LABEL, entityLabel$);
		gn.instantiate(console, gn$);
		return gn.getLocator();
	}catch(Exception e){
		 Logger.getLogger(JViewSelector.class.getName()).severe(e.toString());
	}
	return null;
}
private String getEdgesLocator(){
/*
	try{
		JGraphNodes gn=new JGraphNodes();
		String gn$=gn.getLocator();
		gn$=Locator.append(gn$, Entigrator.ENTIHOME, entihome$);
		gn$=Locator.append(gn$, EntityHandler.ENTITY_KEY, entityKey$);
		gn$=Locator.append(gn$, EntityHandler.ENTITY_LABEL, entityLabel$);
		gn.instantiate(console, gn$);
		return gn.getLocator();
	}catch(Exception e){
		 Logger.getLogger(JViewSelector.class.getName()).severe(e.toString());
	}
	*/
	return null;
}
private String getGraphLocator(){

	try{
		JGraphRenderer gr=new JGraphRenderer();
		String gr$=gr.getLocator();
		gr$=Locator.append(gr$, Entigrator.ENTIHOME, entihome$);
		gr$=Locator.append(gr$, EntityHandler.ENTITY_KEY, entityKey$);
		gr$=Locator.append(gr$, EntityHandler.ENTITY_LABEL, entityLabel$);
		gr.instantiate(console, gr$);
		return gr.getLocator();
	}catch(Exception e){
		 Logger.getLogger(JViewSelector.class.getName()).severe(e.toString());
	}

	return null;
}
private String getFacetsLocator(){

	try{
		JEntityFacetPanel fp=new JEntityFacetPanel();
		String fp$=fp.getLocator();
		fp$=Locator.append(fp$, Entigrator.ENTIHOME, entihome$);
		fp$=Locator.append(fp$, EntityHandler.ENTITY_KEY, entityKey$);
		fp$=Locator.append(fp$, EntityHandler.ENTITY_LABEL, entityLabel$);
		fp.instantiate(console, fp$);
		return fp.getLocator();
	}catch(Exception e){
		 Logger.getLogger(JViewSelector.class.getName()).severe(e.toString());
	}

	return null;
}
@Override
public String addIconToLocator(String locator$) {
	// TODO Auto-generated method stub
	return null;
}
@Override
public String getFacetHandler() {
	return GraphHandler.class.getName();
}
@Override
public String getEntityType() {
	return "graph";
}
@Override
public String getCategoryIcon() {
	try{
		Entigrator entigrator=console.getEntigrator(entihome$);
		return ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
}catch(Exception e){
	LOGGER.severe(e.toString());
	return null;
}
}
@Override
public String getCategoryTitle() {
	return "Graphs";
}
@Override
public void adaptClone(JMainConsole console, String locator$) {
	try{
		Properties locator=Locator.toProperties(locator$);
		String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack entity=entigrator.getEntityAtKey(entityKey$);
		String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
		GraphHandler graphHandler=new GraphHandler();
		graphHandler.instantiate(entityLocator$);
		graphHandler.adaptClone(entigrator);
	}catch(Exception e){
		LOGGER.severe(e.toString());
	}
	
	
}
@Override
public void adaptRename(JMainConsole console, String locator$) {
	try{
		Properties locator=Locator.toProperties(locator$);
		String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack entity=entigrator.getEntityAtKey(entityKey$);
		String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
		GraphHandler graphHandler=new GraphHandler();
		graphHandler.instantiate(entityLocator$);
		graphHandler.adaptRename(entigrator);
	}catch(Exception e){
		LOGGER.severe(e.toString());
	}
	
}
@Override
public void collectReferences(Entigrator entigrator, String entiyKey$, ArrayList<JReferenceEntry> sl) {
	// TODO Auto-generated method stub
	
}
@Override
public void reindex(JMainConsole console, Entigrator entigrator, Sack entity) {
	try{	
    	String graphHandler$=GraphHandler.class.getName();
    	if(entity.getElementItem("fhandler", graphHandler$)!=null){
			entity.putElementItem("jfacet", new Core(null,graphHandler$,JGraphFacetOpenItem.class.getName()));
			entigrator.save(entity);
		}
    }catch(Exception e){
    	Logger.getLogger(getClass().getName()).severe(e.toString());
    }
	
	
}
@Override
public String newEntity(JMainConsole console, String locator$) {
	try{
		Properties locator=Locator.toProperties(locator$);
		String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		JTextEditor textEditor=new JTextEditor();
	    String teLocator$=textEditor.getLocator();
	    teLocator$=Locator.append(teLocator$, Entigrator.ENTIHOME,entihome$);
	    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT_TITLE,"New graph");
	    String text$="NewGraph"+Identity.key().substring(0, 4);
	    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT,text$);
	    JGraphRenderer gr=new JGraphRenderer();
	    String grLocator$=gr.getLocator();
	    grLocator$=Locator.append(grLocator$, Entigrator.ENTIHOME,entihome$);
	    grLocator$=Locator.append(grLocator$, EntityHandler.ENTITY_KEY,entityKey$);
	    grLocator$=Locator.append(grLocator$, BaseHandler.HANDLER_METHOD,"response");
	    grLocator$=Locator.append(grLocator$, JRequester.REQUESTER_ACTION,ACTION_CREATE_GRAPH);
	    String requesterResponseLocator$=Locator.compressText(grLocator$);
	    teLocator$=Locator.append(teLocator$,JRequester.REQUESTER_RESPONSE_LOCATOR,requesterResponseLocator$);
	    JConsoleHandler.execute(console, teLocator$);
	}catch(Exception ee){   
		LOGGER.severe(ee.toString());
		
	}
	return null;
}
}
