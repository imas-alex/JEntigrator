package gdt.jgui.entity.graph;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.logging.Logger;

import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneLayout;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.codec.binary.Base64;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.mxgraph.canvas.mxGraphics2DCanvas;
import com.mxgraph.canvas.mxGraphicsCanvas2D;
import com.mxgraph.shape.mxStencil;
import com.mxgraph.shape.mxStencilRegistry;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.swing.view.mxInteractiveCanvas;
import com.mxgraph.util.mxRectangle;
import com.mxgraph.view.mxGraph;

import gdt.data.entity.BaseHandler;
import gdt.data.entity.BondDetailHandler;
import gdt.data.entity.EdgeHandler;
import gdt.data.entity.EntityHandler;
import gdt.data.entity.GraphHandler;
import gdt.data.entity.facet.ExtensionHandler;
import gdt.data.entity.facet.FieldsHandler;
import gdt.data.grain.Core;
import gdt.data.grain.Identity;
import gdt.data.grain.Locator;
import gdt.data.grain.Sack;
import gdt.data.grain.Support;
import gdt.data.store.Entigrator;
import gdt.jgui.console.JConsoleHandler;
import gdt.jgui.console.JContext;
import gdt.jgui.console.JFacetOpenItem;
import gdt.jgui.console.JFacetRenderer;
import gdt.jgui.console.JMainConsole;
import gdt.jgui.console.JRequester;
import gdt.jgui.entity.JEntityFacetPanel;
import gdt.jgui.entity.JEntityPrimaryMenu;
import gdt.jgui.entity.JReferenceEntry;
import gdt.jgui.entity.edge.JBondsPanel;
import gdt.jgui.tool.JTextEditor;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.BorderLayout;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

public class JGraphRenderer extends JPanel implements JContext , JFacetRenderer,JRequester
, MouseMotionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Logger LOGGER=Logger.getLogger(getClass().getName());
	private static final String ACTION_CREATE_GRAPH="action create graph";
	private JMainConsole console;
	private String entihome$;
    private String entityKey$;
    private String entityLabel$;
    private Sack graphEntity;
    private String locator$;
    mxGraph graph;
    String requesterResponseLocator$;
    public JGraphRenderer()
  	{
  	    super();
  	    setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
  	    
  	}
  /*
    public JGraphRenderer()
	{
		

		//mxGraph graph = new mxGraph();
    	mxGraph graph=ExtensionHandler.loadHandlerInstance(entigrator, GraphHandler.EXTENSION_KEY, "mxGraph");
		Object parent = graph.getDefaultParent();

		graph.getModel().beginUpdate();
		try
		{
			Object v1 = graph.insertVertex(parent, null, "Hello", 20, 20, 80,
					30);
			Object v2 = graph.insertVertex(parent, null, "World!", 240, 150,
					80, 30);
			graph.insertEdge(parent, null, "Edge", v1, v2);
		}
		finally
		{
			graph.getModel().endUpdate();
		}

		mxGraphComponent graphComponent = new mxGraphComponent(graph);
		add(graphComponent);
	}
	*/
	@Override
	public void response(JMainConsole console, String locator$) {
		System.out.println("JGraphrenderer:response:"+Locator.remove(locator$,Locator.LOCATOR_ICON ));
		try{
			Properties locator=Locator.toProperties(locator$);
			String action$=locator.getProperty(JRequester.REQUESTER_ACTION);
			entihome$=locator.getProperty(Entigrator.ENTIHOME);
			Entigrator entigrator=console.getEntigrator(entihome$);
			String text$=locator.getProperty(JTextEditor.TEXT);
			if(ACTION_CREATE_GRAPH.equals(action$)){
				Sack newEntity=entigrator.ent_new("graph", text$);
				newEntity.createElement("field");
				newEntity.putElementItem("field", new Core(null,"name","value"));
				newEntity.createElement("fhandler");
				newEntity.putElementItem("fhandler", new Core(null,GraphHandler.class.getName(),GraphHandler.EXTENSION_KEY));
				newEntity.putElementItem("fhandler", new Core(null,FieldsHandler.class.getName(),null));
				newEntity.createElement("jfacet");
				newEntity.putElementItem("jfacet", new Core("gdt.jgui.entity.graph.JGraphFacetAddItem",EdgeHandler.class.getName(),"gdt.jgui.entity.graph.JGraphFacetOpenItem"));
				newEntity.putAttribute(new Core (null,"icon","graph.png"));
				entigrator.save(newEntity);
				entigrator.ent_assignProperty(newEntity, "fields", text$);
				entigrator.ent_assignProperty(newEntity, "graph", text$);
				String icons$=entihome$+"/"+Entigrator.ICONS;
				Support.addHandlerIcon(JGraphRenderer.class, "graph.png", icons$);
				newEntity=entigrator.ent_reindex(newEntity);
				reindex(console, entigrator, newEntity);
				JEntityFacetPanel efp=new JEntityFacetPanel(); 
				String efpLocator$=efp.getLocator();
				efpLocator$=Locator.append(efpLocator$,Locator.LOCATOR_TITLE,newEntity.getProperty("label"));
				efpLocator$=Locator.append(efpLocator$, Entigrator.ENTIHOME, entihome$);
				efpLocator$=Locator.append(efpLocator$, EntityHandler.ENTITY_KEY, newEntity.getKey());
				efpLocator$=Locator.append(efpLocator$, EntityHandler.ENTITY_LABEL, newEntity.getProperty("label"));
				JEntityPrimaryMenu.reindexEntity(console, efpLocator$);
				Stack<String> s=console.getTrack();
				s.pop();
				console.setTrack(s);
				JConsoleHandler.execute(console, efpLocator$);
				return;
			}
			}catch(Exception e){
			Logger.getLogger(getClass().getName()).severe(e.toString());
		}
		
		
	}

	@Override
	public String addIconToLocator(String locator$) {
		// TODO Auto-generated method stub
		return locator$;
	}

	@Override
	public String getFacetHandler() {
		return GraphHandler.class.getName();
	}

	@Override
	public String getEntityType() {
		return "graph";
	}

	@Override
	public String getCategoryIcon() {
try{
		Entigrator entigrator=console.getEntigrator(entihome$);
		return ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
}catch(Exception e){
	LOGGER.severe(e.toString());
	return null;
}
	}

	@Override
	public String getCategoryTitle() {
		return "Graphs";
	}

	@Override
	public void adaptClone(JMainConsole console, String locator$) {
		try{
			Properties locator=Locator.toProperties(locator$);
			String entihome$=locator.getProperty(Entigrator.ENTIHOME);
			String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
			Entigrator entigrator=console.getEntigrator(entihome$);
			Sack entity=entigrator.getEntityAtKey(entityKey$);
			String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
			GraphHandler graphHandler=new GraphHandler();
			graphHandler.instantiate(entityLocator$);
			graphHandler.adaptClone(entigrator);
		}catch(Exception e){
			LOGGER.severe(e.toString());
		}
		
	}

	@Override
	public void adaptRename(JMainConsole console, String locator$) {
		try{
			Properties locator=Locator.toProperties(locator$);
			String entihome$=locator.getProperty(Entigrator.ENTIHOME);
			String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
			Entigrator entigrator=console.getEntigrator(entihome$);
			Sack entity=entigrator.getEntityAtKey(entityKey$);
			String entityLocator$=EntityHandler.getEntityLocator(entigrator, entity);
			GraphHandler graphHandler=new GraphHandler();
			graphHandler.instantiate(entityLocator$);
			graphHandler.adaptRename(entigrator);
		}catch(Exception e){
			LOGGER.severe(e.toString());
		}
		
	}

	@Override
	public void collectReferences(Entigrator entigrator, String entiyKey$, ArrayList<JReferenceEntry> sl) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void reindex(JMainConsole console, Entigrator entigrator, Sack entity) {
		try{	
	    	String graphHandler$=GraphHandler.class.getName();
	    	if(entity.getElementItem("fhandler", graphHandler$)!=null){
				entity.putElementItem("jfacet", new Core(null,graphHandler$,JGraphFacetOpenItem.class.getName()));
				entigrator.save(entity);
			}
	    }catch(Exception e){
	    	Logger.getLogger(getClass().getName()).severe(e.toString());
	    }
		
	}

	@Override
	public String newEntity(JMainConsole console, String locator$) {
		try{
			Properties locator=Locator.toProperties(locator$);
			String entihome$=locator.getProperty(Entigrator.ENTIHOME);
			JTextEditor textEditor=new JTextEditor();
		    String teLocator$=textEditor.getLocator();
		    teLocator$=Locator.append(teLocator$, Entigrator.ENTIHOME,entihome$);
		    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT_TITLE,"New graph");
		    String text$="NewGraph"+Identity.key().substring(0, 4);
		    teLocator$=Locator.append(teLocator$, JTextEditor.TEXT,text$);
		    JGraphRenderer gr=new JGraphRenderer();
		    String grLocator$=gr.getLocator();
		    grLocator$=Locator.append(grLocator$, Entigrator.ENTIHOME,entihome$);
		    grLocator$=Locator.append(grLocator$, EntityHandler.ENTITY_KEY,entityKey$);
		    grLocator$=Locator.append(grLocator$, BaseHandler.HANDLER_METHOD,"response");
		    grLocator$=Locator.append(grLocator$, JRequester.REQUESTER_ACTION,ACTION_CREATE_GRAPH);
		    String requesterResponseLocator$=Locator.compressText(grLocator$);
		    teLocator$=Locator.append(teLocator$,JRequester.REQUESTER_RESPONSE_LOCATOR,requesterResponseLocator$);
		    JConsoleHandler.execute(console, teLocator$);
		}catch(Exception ee){   
			LOGGER.severe(ee.toString());
			
		}
		return null;
	}

	@Override
	public JPanel getPanel() {
		return this;
	}

	@Override
	public JMenu getContextMenu() {
		final JMenu	menu=new JMenu("Context");
		   menu.setName("Context");
		   menu.addMenuListener(new MenuListener(){
				@Override
				public void menuSelected(MenuEvent e) {
					menu.removeAll();
					//mxGraphComponent graphComponent = new mxGraphComponent(graph);
					JMenuItem showItem = new JMenuItem("Graph");
					 showItem.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							try{
						
								displayGraph();
							}catch(Exception ee){
								 Logger.getLogger(JGraphRenderer.class.getName()).info(ee.toString());
							}
							   }
					});
					menu.add(showItem);
					 JMenuItem  nodesItem = new JMenuItem("Nodes");
					   nodesItem.addActionListener(new ActionListener() {
							@Override
							public void actionPerformed(ActionEvent e) {
								JGraphNodes gn=new JGraphNodes();
								String gnLocator$= gn.getLocator();
								gnLocator$=Locator.append(gnLocator$, Entigrator.ENTIHOME, entihome$);
								gnLocator$=Locator.append(gnLocator$, EntityHandler.ENTITY_KEY, entityKey$);
								JConsoleHandler.execute(console, gnLocator$);
							}
						} );
						menu.add(nodesItem);
						JMenuItem  bondsItem = new JMenuItem("Bonds");
						   bondsItem.addActionListener(new ActionListener() {
								@Override
								public void actionPerformed(ActionEvent e) {
									JBondsPanel bondsPanel=new JBondsPanel();
									String bpLocator$=bondsPanel.getLocator();
									bpLocator$=Locator.append(bpLocator$, Entigrator.ENTIHOME, entihome$);
									bpLocator$=Locator.append(bpLocator$, EntityHandler.ENTITY_KEY, entityKey$);
									bpLocator$=Locator.append(bpLocator$, JFacetOpenItem.FACET_HANDLER_CLASS, BondDetailHandler.class.getName());
									JConsoleHandler.execute(console, bpLocator$);
								}
							} );
							menu.add(bondsItem);
						menu.addSeparator();	
						JMenuItem  rebuildItem = new JMenuItem("Rebuild");
						   rebuildItem.addActionListener(new ActionListener() {
								@Override
								public void actionPerformed(ActionEvent e) {
									rebuild();
								}
							} );
						   menu.add(rebuildItem);
				}

				@Override
				public void menuDeselected(MenuEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void menuCanceled(MenuEvent e) {
					// TODO Auto-generated method stub
					
				}
		   });
		  
			return menu;
	}

	@Override
	public String getLocator() {
		try{
			Properties locator=new Properties();
			locator.setProperty(BaseHandler.HANDLER_CLASS,JGraphRenderer.class.getName());
			locator.setProperty(BaseHandler.HANDLER_SCOPE,JConsoleHandler.CONSOLE_SCOPE);
			 locator.setProperty( JContext.CONTEXT_TYPE,getType());
			locator.setProperty(Locator.LOCATOR_TITLE,getTitle());
			if(entityLabel$!=null){
				locator.setProperty(EntityHandler.ENTITY_LABEL,entityLabel$);
			}
			if(entityKey$!=null)
				locator.setProperty(EntityHandler.ENTITY_KEY,entityKey$);
			if(entihome$!=null){
				locator.setProperty(Entigrator.ENTIHOME,entihome$);
				if(entihome$!=null){
					locator.setProperty(Entigrator.ENTIHOME,entihome$);
					Entigrator entigrator=console.getEntigrator(entihome$);
				String icon$=ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
				if(icon$!=null)
				    	locator.setProperty(Locator.LOCATOR_ICON,icon$);
				}
			}
			if(entityLabel$!=null)
				locator.setProperty(EntityHandler.ENTITY_LABEL,entityLabel$);
			return Locator.toString(locator);
			}catch(Exception e){
	        Logger.getLogger(getClass().getName()).severe(e.toString());
	        return null;
			}
	}

	@Override
	public JContext instantiate(JMainConsole console, String locator$) {
		try{
				System.out.println("JGraphRenderer:instantiate:locator="+locator$);
				this.console=console;
				this.locator$=locator$;
				if(console==null)
					System.out.println("JGraphRenderer:instantiate:consoleis null");
				Properties locator=Locator.toProperties(locator$);
				entihome$=locator.getProperty(Entigrator.ENTIHOME);
				entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
				Entigrator entigrator=console.getEntigrator(entihome$);
				requesterResponseLocator$=locator.getProperty(JRequester.REQUESTER_RESPONSE_LOCATOR);
	            graphEntity=entigrator.getEntityAtKey(entityKey$);
	            entityLabel$=graphEntity.getProperty("label");
	   		    locator=new Properties();
   	   		 locator.setProperty(Locator.LOCATOR_TITLE, "Graph");
   	  	locator.setProperty(Entigrator.ENTIHOME,entihome$);
   	  	String icon$=ExtensionHandler.loadIcon(entigrator, GraphHandler.EXTENSION_KEY,"graph.png");
   	  	if(icon$!=null)
	    	locator.setProperty(Locator.LOCATOR_ICON,icon$);
   	  	displayGraph();
 //  	 Document doc=graphToDoc(console, locator$); 
//		prettyPrint(doc);
//		display();
  /*
   	  	// Object obj=ExtensionHandler.loadHandlerInstance(entigrator, GraphHandler.EXTENSION_KEY, "com.mxgraph.view.mxGraph");
   	// ExtensionHandler.addExtensionLibraries(entigrator,GraphHandler.EXTENSION_KEY);  	
   	// mxGraph graph=(mxGraph)ExtensionHandler.loadHandlerInstance(entigrator, GraphHandler.EXTENSION_KEY, "com.mxgraph.view.mxGraph");
   	 System.out.println("JGraphRenderer:instantiate:1");
   	  	graph=new  mxGraph();
   	 Object parent = graph.getDefaultParent();
   	Object v1 ;
		graph.getModel().beginUpdate();
		try
		{   
			 v1 = graph.insertVertex(parent, null, "Hello","locator 1", 20, 20, 40,
					20);
			Object v2 = graph.insertVertex(parent, null, "World!","locator 1", 80, 80,
					40, 20);
			graph.insertEdge(parent, null, "Edge", v1, v2);
		}
		finally
		{
			graph.getModel().endUpdate();
		}
		mxRectangle rectangle=new  mxRectangle(0,0, 400, 200);
		graph.setMinimumGraphSize(rectangle);
		System.out.println("JGraphRenderer:instantiate:is cells movable="+graph.isCellsMovable());
		System.out.println("JGraphRenderer:instantiate:parent="+graph.getChildCells(parent).length);
		mxGraphComponent graphComponent=null;
		Constructor[] ctors = mxGraphComponent.class.getDeclaredConstructors();
		System.out.println("ExtensionHandler:JGraphRenderer:ctors="+ctors.length);
		Constructor ctor = null;
		for (int i = 0; i < ctors.length; i++) {
		    ctor = ctors[i];
		    if (ctor.getGenericParameterTypes().length == 1)
			break;
		}
		ctor.setAccessible(true);
	  try{
	 graphComponent =(mxGraphComponent)ctor.newInstance(graph);
	 
	 graphComponent.setAutoExtend(true);
	 graphComponent.setDragEnabled(true);
	 graphComponent.setEntigrator(entigrator);
	// graphComponent.setMinimumSize(new Dimension(200, 100));
	 //graphComponent.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
	 
	 //System.out.println("JGraphRenderer:instantiate:3");
	 removeAll();
	 add(graphComponent);
	// System.out.println("JGraphRenderer:w="+ graphComponent.getWidth()+" h="+graphComponent.getHeight());
		}catch(java.lang.ExceptionInInitializerError er){
		  Logger.getLogger(getClass().getName()).severe(er.toString());
	  }
	  
	//	 graphComponent.setGraph(graph);
		*/
		}catch(Exception e){
		        Logger.getLogger(getClass().getName()).severe(e.toString());
			}
		System.out.println("JGraphRenderer:instantiate:finish");
			return this;
			
	}

	@Override
	public String getTitle() {
		return "Graph";
	}

	@Override
	public String getSubtitle() {
		return entityLabel$;
	}

	@Override
	public String getType() {
		return "graph";
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseDragged(MouseEvent e) {
		System.out.println("JGraphRenderer: mouseDragged:BEGIN");
		
	}
	@Override
	public void mouseMoved(MouseEvent e) {
		System.out.println("JGraphRenderer: mouseMoved:BEGIN");
		
	}
public static Document  graphToDoc(JMainConsole console,String locator$){
	try{
		 DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
         DocumentBuilder builder = dbf.newDocumentBuilder();
		 Document doc = builder.newDocument();
		 Element rootElement = doc.createElement("root");
         doc.appendChild(rootElement);
		 Properties locator=Locator.toProperties(locator$);
		 String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		 Entigrator entigrator=console.getEntigrator(entihome$);
		 String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
		 Sack graph=entigrator.getEntityAtKey(entityKey$);
		 Core[] ca=graph.elementGet("bond");
		 if(ca==null)
			 return null;
		 ArrayList <String>sl=new ArrayList<String>();
		 for(Core c:ca){
			 if(c.type!=null)
				 if(!sl.contains(c.type))
					 sl.add(c.type);
			 if(c.value!=null)
				 if(!sl.contains(c.value))
					 sl.add(c.value);
		 }
         String[] sa=sl.toArray(new String[0]);
         System.out.println("JGraphRenderer:graphToDoc:sa="+sa.length);
         String label$;
         String icon$;
         String iconFile$;
         Sack item;
         Element backgroundElement;
         Element foregroundElement;
         Element itemElement;
         Element pathElement;
         Element moveElement;
         Element quadElement;
         Element closeElement;
         Element fillstrokeElement;
         Element imageElement;
         Element fontColorElement;
         Element fontStyleElement;
         Element textElement;
         JEntityFacetPanel efp=new JEntityFacetPanel();
 		 locator$=efp.getLocator();
 		 int i=0;
         for(String s:sa){
        	 try{
        		 
        		label$=entigrator.indx_getLabel(s);
        		item=entigrator.getEntityAtKey(s);
        		icon$=item.getAttributeAt("icon");
        		if(icon$!=null)
        			iconFile$="file:"+entihome$+"/"+Entigrator.ICONS+"/"+icon$;
        		else
        			iconFile$=null;
        		System.out.println("JGraphRenderer:graphToDoc:");
        		itemElement=doc.createElement("shape");
        		itemElement.setAttribute("name", label$);
        		itemElement.setAttribute("aspect", "fixed");
        		locator$=Locator.append(locator$,Entigrator.ENTIHOME,entihome$);
        		locator$=Locator.append(locator$,EntityHandler.ENTITY_KEY,s);
        		itemElement.setAttribute("locator", locator$);
        	/*
        		
        		backgroundElement=doc.createElement("background");
        		pathElement=doc.createElement("path");
        		backgroundElement.appendChild(pathElement);
        		moveElement=doc.createElement("move");
        		moveElement.setAttribute("x", "0");
        		moveElement.setAttribute("y", "0");
        		pathElement.appendChild(moveElement);
        		quadElement=doc.createElement("quad");
        		quadElement.setAttribute("x1", "100");
        		quadElement.setAttribute("y1", "0");
        		quadElement.setAttribute("x2", "100");
        		quadElement.setAttribute("y2", "50");
        		pathElement.appendChild(quadElement);
        		quadElement=doc.createElement("quad");
        		quadElement.setAttribute("x1", "100");
        		quadElement.setAttribute("y1", "100");
        		quadElement.setAttribute("x2", "0");
        		quadElement.setAttribute("y2", "100");
        		pathElement.appendChild(quadElement);
        		quadElement=doc.createElement("quad");
        		quadElement.setAttribute("x1", "50");
        		quadElement.setAttribute("y1", "50");
        		quadElement.setAttribute("x2", "0");
        		quadElement.setAttribute("y2", "0");
        		pathElement.appendChild(quadElement);
        		closeElement=doc.createElement("close");
        		pathElement.appendChild(closeElement);
        		itemElement.appendChild(backgroundElement);
        		*/
        		//foreground
        		
        		foregroundElement=doc.createElement("foreground");
        		fillstrokeElement=doc.createElement("fillstroke");
        		
        		foregroundElement.appendChild(fillstrokeElement);
        		imageElement=doc.createElement("image");
        		imageElement.setAttribute("src", iconFile$);
        		imageElement.setAttribute("x", String.valueOf(i*10));
        		imageElement.setAttribute("y", String.valueOf(i*10));
        		imageElement.setAttribute("w", "40");
        		imageElement.setAttribute("h", "40");
        		imageElement.setAttribute("flipH", "1");
        		//imageElement.setAttribute("style","fillColor=#cFFFFF;opacity=100;gradientColor=#FFFFFF;strokeColor=#120808");
        		foregroundElement.appendChild(imageElement);
        		fontColorElement=doc.createElement("fontcolor");
        		fontColorElement.setAttribute("color", "#ffffff");
        		foregroundElement.appendChild(fontColorElement);
        		fontStyleElement=doc.createElement("fontstyle");
        		fontStyleElement.setAttribute("style", "1");
        		foregroundElement.appendChild(fontStyleElement);
        		/*
        		textElement=doc.createElement("text");
        		
        		textElement.setAttribute("str", "Oben");
        		textElement.setAttribute("x", "14");
        		textElement.setAttribute("y", "6");
        		textElement.setAttribute("y", "6");
        		textElement.setAttribute("align","left");
        		textElement.setAttribute("valign","top");
        		foregroundElement.appendChild(textElement);
        		textElement=doc.createElement("text");
        		textElement.setAttribute("str", "Unten");
        		textElement.setAttribute("x", "14");
        		textElement.setAttribute("y", "94");
        		textElement.setAttribute("y", "6");
        		textElement.setAttribute("align","left");
        		textElement.setAttribute("valign","bottom");
        		foregroundElement.appendChild(textElement);
        		*/
        		foregroundElement.appendChild(fontStyleElement);

        		itemElement.appendChild(foregroundElement);
        		rootElement.appendChild(itemElement);
        		//itemElement=doc.createElement("foreground");
        	 }catch(Exception e){
        		 Logger.getLogger(JGraphRenderer.class.getName()).info(e.toString()); 
        	 }
         }
		 return doc;
	}catch(Exception e){
		Logger.getLogger(JGraphRenderer.class.getName()).severe(e.toString());
		return null;
	}
}
private  void  displayGraph(){
	try{
		System.out.println("JGraphRenderer:displayGraph:BEGIN");
		Entigrator entigrator=console.getEntigrator(entihome$);
		mxGraph graph=(mxGraph)ExtensionHandler.loadHandlerInstance(entigrator, GraphHandler.EXTENSION_KEY, "com.mxgraph.view.mxGraph");
		Object parent = graph.getDefaultParent();
		System.out.println("JGraphRenderer:displayGraph:1");
		graph.getModel().beginUpdate();

		Sack graphEntity=entigrator.getEntityAtKey(entityKey$);
		Core[] ca=graphEntity.elementGet("node");
		if(ca==null)
			return;
	    JLabel itemLabel;
	    String itemLocator$;
	    ImageIcon icon;
	    String icon$;
	    int i=0;
		for(Core c:ca){
			itemLocator$=EntityHandler.getEntityLocator( entihome$,c.name,c.value,c.type);
			itemLabel=new JLabel(c.value);
			icon$=entigrator.readIconFromIcons(c.type);
			if(icon$!=null){
				byte[] ba=Base64.decodeBase64(icon$);
	      	  icon = new ImageIcon(ba);
	      	  Image image= icon.getImage().getScaledInstance(24, 24, 0);
	      	  icon.setImage(image);
	      	  itemLabel.setIcon(icon);
	      	  itemLabel.setName(itemLocator$);
	      	itemLabel.addMouseListener(new MouseAdapter() {
	                @Override
	                public void mouseClicked(MouseEvent e) {
	                	JLabel l=(JLabel)e.getSource();
	                    System.out.println("JGraphRenderer:displayGraph:item click:"+l.getName());
	                }

	            });
			}
			//
			graph.insertVertex(parent, null, itemLabel, i*45, i*35, 40,
					30);
		}
		mxGraphComponent graphComponent = new mxGraphComponent(graph);
		add(graphComponent);
		
	}catch(Exception e){
		Logger.getLogger(JGraphRenderer.class.getName()).severe(e.toString());
	}
	
}
private void display(){
	try{
		Document doc =graphToDoc(console, locator$);
		Element shapes = (Element) doc.getDocumentElement();
		NodeList list = shapes.getElementsByTagName("shape");
		 mxStencil stencil;
		 ArrayList<String>sl=new ArrayList<String>();
		 String name$;
		 String locator$;
		 Hashtable<String,String>map=new Hashtable<String,String>(); 
		for (int i = 0; i < list.getLength(); i++)
		{
			Element shape = (Element) list.item(i);
			name$=shape.getAttribute("name");
			locator$=shape.getAttribute("locator");
			if(name$!=null){
			sl.add(name$);
			if(locator$!=null)
				map.put(name$, locator$);
			}
			stencil =new mxStencil(shape)
			{
				
				protected mxGraphicsCanvas2D createCanvas(
						final mxGraphics2DCanvas gc)
				{
					// Redirects image loading to graphics canvas
					return new mxGraphicsCanvas2D(gc.getGraphics())
					{
						protected Image loadImage(String src)
						{
							
							return gc.loadImage(src);
						}
					};
				}
			};
			mxStencilRegistry.addStencil(shape.getAttribute("name"),stencil);
			
		}
		 mxGraph graph = new mxGraph();
			Object parent = graph.getDefaultParent();
			graph.getModel().beginUpdate();
		String[] sa=sl.toArray(new String[0]);
		int i=0;
		Entigrator entigrator=console.getEntigrator(entihome$);
		
		Sack item;
		if(sa!=null)
			for(String s:sa){
				try
				{
		
					locator$=map.get(s);
				    System.out.println("JGraphRenderer:display.s="+s+" locator="+locator$);
					 graph.insertVertex(parent, null, s,locator$, 20+i*240, 30, 80, 40
									,"shape="+s
							 );
				i++;
			//		graph.insertEdge(parent, null, "Edge", v1, v2);
				
				}	
			
			catch (Exception ee)
			{
				ee.printStackTrace();
			}
				graph.getModel().endUpdate();
			}

			mxGraphComponent graphComponent = new mxGraphComponent(graph);
			add(graphComponent);
			graphComponent.setConsole(console);
	}catch(Exception e){
		Logger.getLogger(JGraphRenderer.class.getName()).severe(e.toString());
	}
}
public static final void prettyPrint(Document xml) throws Exception {

       Transformer tf = TransformerFactory.newInstance().newTransformer();

       tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");

       tf.setOutputProperty(OutputKeys.INDENT, "yes");

       Writer out = new StringWriter();

       tf.transform(new DOMSource(xml), new StreamResult(out));

       System.out.println(out.toString());

   }
private void rebuild(){
	try{
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack graph=entigrator.getEntityAtKey(entityKey$);
		Core[] ca=graph.elementGet("node");
		graph.removeElement("bond");
		graph.createElement("bond");
		Sack node;
		if(ca==null)
			return;
		Core[]ba;
		for(Core c:ca){
			node=entigrator.getEntityAtKey(c.name);
			if(node==null)
				continue;
			ba=node.elementGet("bond");
			if(ba!=null)
				for( Core b:ba){
					if(graph.getElementItem("bond", b.name)!=null)
						continue;
					graph.putElementItem("bond", b);
					
				}
			
		}
	entigrator.save(graph);	
		
	}catch(Exception e){
		Logger.getLogger(JGraphRenderer.class.getName()).severe(e.toString());
	}
}
}

