package gdt.jgui.entity.edge;
/*
 * Copyright 2016 Alexander Imas
 * This file is part of JEntigrator.

    JEntigrator is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    JEntigrator is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with JEntigrator.  If not, see <http://www.gnu.org/licenses/>.
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Properties;
import java.util.logging.Logger;

import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

import gdt.data.entity.BaseHandler;
import gdt.data.entity.EntityHandler;
import gdt.data.grain.Core;
import gdt.data.grain.Locator;
import gdt.data.grain.Sack;
import gdt.data.store.Entigrator;
import gdt.jgui.console.JConsoleHandler;
import gdt.jgui.console.JItemPanel;
import gdt.jgui.console.JMainConsole;
import gdt.jgui.console.JRequester;
/**
 *This class represents a 
 * @author imasa
 *
 */
public class JBondItem extends JItemPanel{
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor.
	 * @param console the main console.
	 * @param locator$ the locator string.
	 */
	public JBondItem(final JMainConsole console,final String locator$){
		super(console,locator$);
		popup = new JPopupMenu();
		JMenuItem openItem=new JMenuItem("Delete");
		   popup.add(openItem);
		   openItem.setHorizontalTextPosition(JMenuItem.RIGHT);
		   openItem.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					try{
					//JWeblinkEditor wle=new JWeblinkEditor();
					//wle.browseUrl(console,locator$);
					}catch(Exception ee){
						Logger.getLogger(getClass().getName()).info(ee.toString());
					}
				}
			    });
		  
		   JMenuItem outNodeItem=new JMenuItem("Set out node");
		   popup.add(outNodeItem);
		   outNodeItem.setHorizontalTextPosition(JMenuItem.RIGHT);
		   outNodeItem.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					try{
					
					Properties locator=Locator.toProperties(JBondItem.this.locator$);
					String entihome$=locator.getProperty(Entigrator.ENTIHOME);
					String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
					String bondKey$=locator.getProperty(JBondsPanel.BOND_KEY);
				    String nodeKey$=getNodeKeyFromClipboard();
				    Entigrator entigrator=console.getEntigrator(entihome$);
					//String nodelabel$=entigrator.indx_getLabel(nodeKey$);
					Sack edge=entigrator.getEntity(entityKey$);
					Core bond=edge.getElementItem("bond", bondKey$);
					if (bond==null)
						bond=new Core(nodeKey$,bondKey$,null);
					else
						bond.type=nodeKey$;
					edge.putElementItem("bond",bond );
					entigrator.save(edge);
					JBondsPanel bp=new JBondsPanel();
					String bpLocator$=bp.getLocator();
					bpLocator$=Locator.append(bpLocator$,Entigrator.ENTIHOME, entihome$);
					bpLocator$=Locator.append(bpLocator$,EntityHandler.ENTITY_KEY, entityKey$);
					JConsoleHandler.execute(console,bpLocator$ );
					}catch(Exception ee){
						Logger.getLogger(getClass().getName()).info(ee.toString());
					}
				}
				
			    });
		   JMenuItem inNodeItem=new JMenuItem("Set in node");
		   popup.add(inNodeItem);
		   inNodeItem.setHorizontalTextPosition(JMenuItem.RIGHT);
		   inNodeItem.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					try{
					
					Properties locator=Locator.toProperties(JBondItem.this.locator$);
					String entihome$=locator.getProperty(Entigrator.ENTIHOME);
					String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
					String bondKey$=locator.getProperty(JBondsPanel.BOND_KEY);
				    String nodeKey$=getNodeKeyFromClipboard();
				    Entigrator entigrator=console.getEntigrator(entihome$);
					//String nodelabel$=entigrator.indx_getLabel(nodeKey$);
					Sack edge=entigrator.getEntity(entityKey$);
					Core bond=edge.getElementItem("bond", bondKey$);
					if (bond==null)
						bond=new Core(null,bondKey$,nodeKey$);
					else
						bond.value=nodeKey$;
					edge.putElementItem("bond",bond );
					entigrator.save(edge);
					JBondsPanel bp=new JBondsPanel();
					String bpLocator$=bp.getLocator();
					bpLocator$=Locator.append(bpLocator$,Entigrator.ENTIHOME, entihome$);
					bpLocator$=Locator.append(bpLocator$,EntityHandler.ENTITY_KEY, entityKey$);
					JConsoleHandler.execute(console,bpLocator$ );
					}catch(Exception ee){
						Logger.getLogger(getClass().getName()).info(ee.toString());
					}
				}
				
			    });
			  
	}
	private String getNodeKeyFromClipboard(){
		try{
		String[] sa=console.clipboard.getContent();
		if(sa==null||sa.length<1)
			return null;
		Properties clipLocator;
		String entityKey$;
		for(String s:sa){
			clipLocator=Locator.toProperties(s);
			entityKey$=clipLocator.getProperty(EntityHandler.ENTITY_KEY);
			if(entityKey$!=null)
				return entityKey$;
		}
		}catch(Exception e){
			Logger.getLogger(getClass().getName()).severe(e.toString());
		}
		return null;
}
	private boolean isCommitted(){
		try{
		Properties locator=Locator.toProperties(JBondItem.this.locator$);
		String entihome$=locator.getProperty(Entigrator.ENTIHOME);
		String entityKey$=locator.getProperty(EntityHandler.ENTITY_KEY);
		String bondKey$=locator.getProperty(JBondsPanel.BOND_KEY);
		Entigrator entigrator=console.getEntigrator(entihome$);
		Sack edge=entigrator.getEntity(entityKey$);
		Core bond=edge.getElementItem("bond", bondKey$);
		Sack outNode=entigrator.getEntity(bond.type);
		Sack inNode=entigrator.getEntity(bond.type);
		Core outEdge=outNode.getElementItem("edge", bondKey$);
		if("out".equals(outEdge.type))
			if(entityKey$.equals(outEdge.value)){
				Core inEdge=inNode.getElementItem("edge", bondKey$);
				if("in".equals(inEdge.type))
					if(entityKey$.equals(inEdge.value))
						return true;
			}
	  	
	}catch(Exception e){
		Logger.getLogger(getClass().getName()).severe(e.toString());
	
	}
		return false;
}
}
